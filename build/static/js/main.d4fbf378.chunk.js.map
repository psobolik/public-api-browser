{"version":3,"sources":["EntryList.js","CategoryList.js","App.js","registerServiceWorker.js","index.js"],"names":["EntryRow","prop","href","entry","Link","target","API","Description","Auth","HTTPS","Cors","EntryList","props","entries","error","isLoaded","list","category","message","rows","map","item","index","key","className","width","CategoryItem","value","CategoryList","categories","listItems","sort","size","length","onChange","e","selectCategoryHandler","App","state","baseUri","bind","this","fetchCategories","fetchEntries","fetch","then","res","json","setState","encodeURIComponent","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.d4fbf378.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css'\n\nfunction EntryRow (prop) {\n  return <tr>\n    <td><a href={prop.entry.Link} target='_new'>{prop.entry.API}</a></td>\n    <td>{prop.entry.Description}</td>\n    <td>{prop.entry.Auth}</td>\n    <td>{prop.entry.HTTPS ? 'yes' : ''}</td>\n    <td>{prop.entry.Cors}</td>\n  </tr>\n}\n\nfunction EntryList (props) {\n  const { error, isLoaded, list, category } = props.entries\n  if (error) {\n    return <div>Error: {error.message}</div>\n  } else if (!isLoaded) {\n    return <p>Loading entries...</p>\n  } else {\n    const rows = list.map((item, index) =>\n      <EntryRow key={index} entry={item} />\n    )\n    return (\n      <span className='Panel'>\n        <h2>{category}</h2>\n        <table className='EntryTable'>\n          <col width='150px' />\n          <col width='200px' />\n          <col width='80px' />\n          <col width='80px' />\n          <col width='80px' />\n          <thead><tr><th>API</th><th>Description</th><th>Auth</th><th>HTTPS</th><th>CORS</th></tr></thead>\n          <tbody>\n            {rows}\n          </tbody></table>\n      </span>\n    )\n  }\n}\nexport default EntryList\n","import React from 'react'\n\nfunction CategoryItem (prop) {\n  return <option>{prop.value}</option>\n}\n\nfunction CategoryList (props) {\n  const { error, isLoaded, list } = props.categories\n  if (error) {\n    return <div>Error: {error.message}</div>\n  } else if (!isLoaded) {\n    return <div>Loading...</div>\n  } else {\n    const listItems = list.sort().map((item, index) =>\n      <CategoryItem key={index} value={item} />\n    )\n    return (\n      <span className='Panel'>\n        <h2>Category</h2>\n        <select className={'Categories'} size={listItems.length} onChange={(e) => props.selectCategoryHandler(e)}>\n          {listItems}\n        </select>\n      </span>\n    )\n  }\n}\nexport default CategoryList\n","import React, { Component } from 'react'\nimport EntryList from './EntryList'\nimport CategoryList from './CategoryList'\nimport './App.css'\n\n/* global fetch */\n\nclass App extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      baseUri: 'https://api.publicapis.org/',\n      categories: {\n        list: [],\n        error: null,\n        isLoaded: false\n      },\n      entries: {\n        list: [],\n        error: null,\n        isLoaded: false,\n        category: null\n      }\n    }\n    this.selectCategoryHandler = this.selectCategoryHandler.bind(this)\n  }\n\n  componentDidMount () {\n    this.fetchCategories()\n  }\n\n  render () {\n    return (\n      <div className='App'>\n        <div className='Header'>\n          <h1>Public API Browser</h1>\n          <div><a href='https://github.com/toddmotto/public-apis'>Public APIs Github Project</a> | <a\n            href='https://api.publicapis.org'>Public API for Public APIs</a></div>\n        </div>\n        <CategoryList categories={this.state.categories} selectCategoryHandler={(e) => this.selectCategoryHandler(e)} />\n        <EntryList entries={this.state.entries} />\n      </div>\n    )\n  }\n\n  selectCategoryHandler (e) {\n    // https://api.publicapis.org/entries?category=Anti-malware\n    /*\n    {\"count\":6,\"entries\":[{\"API\":\"AlienVault Open Threat Exchange (OTX)\",\"Description\":\"IP/domain/URL reputation\",\"Auth\":\"apiKey\",\"HTTPS\":true,\"Cors\":\"unknown\",\"Link\":\"https://otx.alienvault.com/api/\",\"Category\":\"Anti-Malware\"},{\"API\":\"Certly\",\"Description\":\"Certly Link/Domain Flagging\",\"Auth\":\"apiKey\",\"HTTPS\":true,\"Cors\":\"unknown\",\"Link\":\"https://guard.certly.io/\",\"Category\":\"Anti-Malware\"},{\"API\":\"Google Safe Browsing\",\"Description\":\"Google Link/Domain Flagging\",\"Auth\":\"apiKey\",\"HTTPS\":true,\"Cors\":\"unknown\",\"Link\":\"https://developers.google.com/safe-browsing/\",\"Category\":\"Anti-Malware\"},{\"API\":\"Metacert\",\"Description\":\"Metacert Link Flagging\",\"Auth\":\"apiKey\",\"HTTPS\":true,\"Cors\":\"unknown\",\"Link\":\"https://metacert.com/\",\"Category\":\"Anti-Malware\"},{\"API\":\"VirusTotal\",\"Description\":\"VirusTotal File/URL Analysis\",\"Auth\":\"apiKey\",\"HTTPS\":true,\"Cors\":\"unknown\",\"Link\":\"https://www.virustotal.com/en/documentation/public-api/\",\"Category\":\"Anti-Malware\"},{\"API\":\"Web Of Trust (WOT)\",\"Description\":\"Website reputation\",\"Auth\":\"apiKey\",\"HTTPS\":true,\"Cors\":\"unknown\",\"Link\":\"https://www.mywot.com/wiki/API\",\"Category\":\"Anti-Malware\"}]}\n     */\n    this.fetchEntries(e.target.value)\n  }\n\n  fetchCategories () {\n    fetch(this.state.baseUri + 'categories')\n      .then(res => res.json())\n      .then(res => {\n        this.setState({\n          categories: {\n            list: res,\n            isLoaded: true\n          }\n        })\n        if (res != null && res.length > 0) this.fetchEntries(res[0])\n      },\n      error => {\n        this.setState({\n          categories: {\n            error,\n            isLoaded: false\n          }\n        })\n      })\n  }\n\n  fetchEntries (category) {\n    fetch(this.state.baseUri + 'entries?category=' + encodeURIComponent(category))\n      .then(res => res.json())\n      .then(res => {\n        this.setState({\n          entries: {\n            category: category,\n            list: res.entries,\n            isLoaded: true\n          }\n        })\n      },\n      error => {\n        this.setState({\n          entries: {\n            error,\n            isLoaded: false\n          }\n        })\n      })\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\n/* global fetch */\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport default function register () {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          )\n        })\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.')\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\n/*\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n*/\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport registerServiceWorker from './registerServiceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\nregisterServiceWorker()\n"],"sourceRoot":""}